/*
 * Copyright LWJGL. All rights reserved.
 * License terms: https://www.lwjgl.org/license
 */
#version 430 core

uniform vec3 eye;
uniform vec3 ray00;
uniform vec3 ray01;
uniform vec3 ray10;
uniform vec3 ray11;
uniform ivec2 size;
uniform float time;

struct box {
  vec3 min;
  vec3 max;
};

layout (std430, binding = 1) buffer Boxes
{
  box boxes[];
};

layout (std430, binding = 2) buffer OutputImage
{
  vec4 outputImage[];
};

#define MAX_SCENE_BOUNDS 100.0
#define EPSILON 0.00001

struct hitinfo {
  float near;
  float far;
  int bi;
};

vec2 intersectBox(vec3 origin, vec3 dir, const box b) {
  vec3 tMin = (b.min - origin) / dir;
  vec3 tMax = (b.max - origin) / dir;
  vec3 t1 = min(tMin, tMax);
  vec3 t2 = max(tMin, tMax);
  float tNear = max(max(t1.x, t1.y), t1.z);
  float tFar = min(min(t2.x, t2.y), t2.z);
  return vec2(tNear, tFar);
}

bool intersectBoxes(vec3 origin, vec3 dir, out hitinfo info) {
  float smallest = MAX_SCENE_BOUNDS;
  bool found = false;
  int numBoxes = boxes.length();
  for (int i = 0; i < numBoxes; i++) {
    box b = boxes[i];
    vec2 lambda = intersectBox(origin, dir, b);
    if (lambda.y >= 0.0 && lambda.x < lambda.y && lambda.x < smallest) {
      info.near = lambda.x;
      info.far = lambda.y;
      info.bi = i;
      smallest = lambda.x;
      found = true;
    }
  }
  return found;
}

vec4 trace(vec3 origin, vec3 dir) {
  hitinfo i;
  if (intersectBoxes(origin, dir, i)) {
    float gray = 0.25 + (float(i.bi) / boxes.length()) * 0.75;
    return vec4(gray, gray, gray, 1.0);
  } else {
    return vec4(0.0);
  }
}

layout (local_size_x = 16, local_size_y = 8) in;

void main(void) {
  ivec2 pix = ivec2(gl_GlobalInvocationID.xy);
  if (pix.x >= size.x || pix.y >= size.y) {
    return;
  }
  vec2 pos = (vec2(pix) + vec2(0.5, 0.5)) / vec2(size.x, size.y);
  vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
  vec2 p = pos;
  vec3 dir = mix(mix(ray00, ray01, p.y), mix(ray10, ray11, p.y), p.x);
  color = trace(eye, dir);
  vec4 oldColor = vec4(0.0);
  vec4 finalColor = color;
  outputImage[size.x * pix.y + pix.x] = finalColor;
}
