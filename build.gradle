plugins {
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.10'  //requires JDK11+
    id 'com.gluonhq.gluonfx-gradle-plugin' version '1.0.4'  //requires GraalVM 21.1+
}

wrapper {
    gradleVersion = '7.2'
    distributionType = Wrapper.DistributionType.ALL
}

group = 'org.lwjgl'
description = 'LWJGL3 demos with native image by GraalVM'
//version = '0.0.1-SNAPSHOT'

ext {
    lwjglVersion = '3.2.3'
    jomlVersion = '1.10.1'
    swtMavenVersion = '3.105.3'  //contains Eclipse SWT 4.6.2.9 software
    graalvmVersion = '21.2.0'

    //LWJGL modules used: minimal OpenGL, plus bgfx, cuda, jemalloc, shaderc, vma, vulkan
    lwjglModules = [
        'lwjgl', 'lwjgl-assimp', 'lwjgl-glfw', 'lwjgl-openal', 'lwjgl-opengl', 'lwjgl-stb',  //for OpenGL demos
        'lwjgl-bgfx',                                  //for BGFX demos
        'lwjgl-cuda',                                  //for CUDA demos (require NVIDIA hardware)
        'lwjgl-jemalloc',                              //utilities
        'lwjgl-shaderc', 'lwjgl-vma', 'lwjgl-vulkan',  //for Vulkan demos (requires discrete GPU with Vulkan driver)
    ]

    mainClassName = 'org.lwjgl.demo.DemoLauncher'
    currentPlatform = getCurrentPlatform()
}

repositories {
    mavenCentral()
    mavenLocal()
}

//detect the OS (assuming 64-bit, on Intel/AMD hardware)
private static String getCurrentPlatform() {
    def currentOS = org.gradle.nativeplatform.platform.internal.DefaultNativePlatform.currentOperatingSystem;
    if (currentOS.isWindows()) {
        return 'windows'
    } else if (currentOS.isLinux()) {
        return 'linux'
    } else if (currentOS.isMacOsX()) {
        return 'macos'
    }
    return 'unknown'
}

dependencies {
    implementation "org.joml:joml:$jomlVersion"
    //for compiling GraalVM substitution classes
    compileOnly "org.graalvm.nativeimage:svm:$graalvmVersion"

    //OS-specific SWT library (64-bit Intel/AMD hardware only)
    switch (currentPlatform) {
        case 'linux':
            implementation("org.eclipse.platform:org.eclipse.swt.gtk.linux.x86_64:$swtMavenVersion") {
                exclude group: 'org.eclipse.platform', module: 'org.eclipse.swt'
            }
            break
        case 'macos':
            implementation("org.eclipse.platform:org.eclipse.swt.cocoa.macosx.x86_64:$swtMavenVersion") {
                exclude group: 'org.eclipse.platform', module: 'org.eclipse.swt'
            }
            break
        case 'windows':
            implementation("org.eclipse.platform:org.eclipse.swt.win32.win32.x86_64:$swtMavenVersion") {
                exclude group: 'org.eclipse.platform', module: 'org.eclipse.swt'
            }
            break
        default:
            throw new GradleException('Unknown OS: ' + currentPlatform)
    }

    //get recommended dependency versions from the LWJGL BOM
    implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")

    //add LWJGL modules and their natives of current OS to the compile and runtime classpaths
    lwjglModules.each {
        implementation "org.lwjgl:$it"
        if (it != 'lwjgl-cuda' && it != 'lwjgl-egl') { //cuda, egl have no native modules
            //use natives for 64-bit Intel/AMD platforms only
            if (it == 'lwjgl-vulkan') {
                if (currentPlatform == 'macos') {
                    //Vulkan natives exist for Mac OSX only
                    runtimeOnly "org.lwjgl:$it::natives-$currentPlatform"
                }
            } else {
                runtimeOnly "org.lwjgl:$it::natives-$currentPlatform"
            }
        }
    }
}

sourceSets {
    main {
        java {
            srcDirs = ['src']
        }
        resources {
            srcDirs = ['res', "graal-cfg/$currentPlatform"]
        }
    }
}

application {
    mainClass = project.mainClassName
    applicationName = project.name  //name of the resulting native executable
}

compileJava {
    options.release = 11  //use JDK11+ for compiling & running
    options.encoding = 'UTF-8'
}

run {
    //default demo to be run is bgfx.Bump
    //(the package "org.lwjgl.demo." is prepended automatically)
    args 'bgfx.Bump'

    //get system properties specified from the command line (for debugging, etc.)
    //and pass them on to the running application's JVM
    systemProperties = System.getProperties()

    //use the following jvmArgs for as many different run scenarios as possible,
    //and for all the code-execution paths as much as possible,
    //to generate (or merge with) the GraalVM native-image configuration files
    //in the graal-cfg/$currentPlatform/META-INF/native-image directory.
    //This directory is read by GraalVM during the native-image build.

    //jvmArgs = ["-agentlib:native-image-agent=config-merge-dir=graal-cfg/$currentPlatform/META-INF/native-image"]
}

gluonfx {
    compilerArgs = [
        '--initialize-at-run-time=org.lwjgl',
        '--report-unsupported-elements-at-runtime',
    ]
}
